#! /usr/bin/perl

# Append these lines to your i3 config file:
#     exec_always --no-startup-id ~/.config/i3/helpers/ebaf
#     bindsym $mod+a nop ebaf back_and_forth
#     bindsym $mod+Control+1 nop ebaf output 1

use strict;
use v5.10;

use AnyEvent;
use AnyEvent::I3 qw(:all);

use Data::Dumper;
$Data::Dumper::Sortkeys = $Data::Dumper::Indent = 1;

my(%state,$ret);

my $i3 = i3();

print "ebaf:Connecting...\n";
$i3->connect->recv() or
  die "ebaf:could not connect to i3: $!\n";

my %callbacks =
  ( workspace => \&track_workspace,
    output => \&track_outputs,
    binding => \&run_commands,
    _error => \&reconnect_or_exit,
  );

printf "ebaf:Hooking event...\n";
$ret = $i3->subscribe(\%callbacks)->recv;
unless ($ret->{success}) {
    die "ebaf: Could not subscribe to the events: $!\n";
}

# looking up current outputs
update_outputs();

$ret = i3->get_workspaces->recv;
if ($ret) {
    # most likely, the order is most resently used first
    for my $ws (@$ret) {
	push @{$state{workspaces}{$ws->{output}}}, $ws->{num};
	$state{focused} = $ws->{output} if $ws->{focused};
    }
}

# Run forever.
AnyEvent->condvar->recv;

exit 0;

sub track_workspace {
    my($e) = @_;

    if ($e->{change} eq 'focus') {
	# change to new workspace
	my $output = $e->{current}{output};
	my $ws = $e->{current}{num};
	$state{workspaces}{$output} = [ $ws, grep { $_ != $ws } @{$state{workspaces}{$output}} ];
	$state{focused} = $output;
    }
    elsif ($e->{change} eq 'empty') {
	# old workspace deleted, usually preceeded by a focus
	my $output = $e->{current}{output};
	my $ws = $e->{current}{num};
	$state{workspaces}{$output} = [ grep { $_ != $ws } @{$state{workspaces}{$output}} ];
    }
    elsif ($e->{change} eq 'init') {
	# new workspace created, followd by a focus. no need to do anything
	# here...
    }
    elsif ($e->{change} eq 'move') {
	# usually botch preceeded and followed by a focus.  from the moved
	# one to a someting else on old workspace, and focus from old
	# workspace to new one.  new contains where this workspace now
	# lives.
    }
    elsif ($e->{change} eq 'rename') {
	# new contains new name... nothing on old name.  so track workspaces
	# by number...
    }
    elsif ($e->{change} eq 'urgent') {
	# no need to track... yet...
    }
    else {
	for (qw{border current_border_width deco_rect focus floating
		floating_nodes fullscreen_mode geometry id last_split_layout
		layout nodes orientation percent rect scratchpad_state sticky
		swallows urgent window window_rect workspace_layout focused}) {
	    delete $e->{current}{$_};
	    delete $e->{old}{$_};
	}
	delete $e->{container};
	printf "ebaf:Unhandled event: %s\n", Data::Dumper->Dump([$e],[qw(event)]);
    }
}

sub track_outputs {
    my($e) = @_;
    # event info for this one is usesless...
    # always $e->{change} eq "unspecified"
    update_outputs();
}

sub update_outputs {
    $i3->get_outputs
      ->cb(sub {
	       my $output_list = shift->recv;
	       my @outputs;
	       for my $o (@$output_list) {
		   next unless $o->{active};
		   push @outputs, { name => $o->{name},
				    width => $o->{rect}{width},
				    height => $o->{rect}{height},
				    xpos => $o->{rect}{x},
				    ypos => $o->{rect}{y},
				  };
	       }
	       $state{outputs} =
		 [ map { $_->{name} }
		   sort { $a->{ypos} <=> $b->{ypos} ||
			  $a->{xpos} <=> $b->{xpos} }
		   @outputs
		 ];
	   });
}

sub reconnect_or_exit {
    my($e) = @_;
    exit;
}

sub run_commands {
    my($e) = @_;
    # print "------\n";
    return unless $e->{change} eq 'run';
    my $cmd_string = $e->{binding}{command};
    return unless $cmd_string =~ s/^nop\s+ebaf\s*//;
    my($cmd,@params) = split " ", $cmd_string;

    printf "ebaf:Running $cmd @params\n";

    if ($cmd eq 'back_and_forth') {
	_cmd_back_and_forth(@params);
    }
    elsif ($cmd eq 'output') {
	_cmd_go_to_output(@params);
    }
}

sub _cmd_back_and_forth {
    my $current = $state{focused};
    my $ws = $state{workspaces}{$current}[1];

    if ($ws) {
	$i3->command("workspace number $ws")
	  ->cb(sub { shift->recv; });
    }
}

sub _cmd_go_to_output {
    my($output) = @_;
    my($ws);

    if ($output =~ /^\d+$/) {
	my $o = $state{outputs}[$output-1];
	$ws = $state{workspaces}{$o}[0] if $o;
    }
    elsif ($output eq 'next') {
	my $co = $state{focused};
	my $ol = $state{outputs};
	my $n = grep { $ol->[$_] eq $co } 0 .. @$ol-1;
	my $o = $ol->[($n+1) % @$ol];
	$ws = $state{workspaces}{$o}[0]
    }
    elsif ($output eq 'prev') {
	my $co = $state{focused};
	my $ol = $state{outputs};
	my $n = grep { $ol->[$_] eq $co } 0 .. @$ol-1;
	my $o = $ol->[($n-1) % @$ol];
	$ws = $state{workspaces}{$o}[0]
    }
    else {
	$ws = $state{workspaces}{$output}[0];
    }

    return unless defined $ws;

    $i3->command("workspace number $ws")
      ->cb(sub { shift->recv; });

}
